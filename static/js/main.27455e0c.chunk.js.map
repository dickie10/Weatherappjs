{"version":3,"sources":["keys.js","CitySelector.js","UseFetch.js","WeatherCard.js","WeatherList.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","API_Key","Base","CitySelector","onSearch","useState","city","setCity","Row","Col","xs","FormControl","placeholder","onChange","event","target","value","Button","onClick","UseFetch","intialUrl","data","setData","error","setError","isLoading","setIsLoading","url","setUrl","useEffect","fetch","then","response","json","cod","message","catch","WeatherCard","dt","temp_min","temp_max","main","icon","date","Date","Card","Img","variant","src","Body","Title","toLocaleDateString","toLocaleTimeString","WeatherList","weathers","map","weather","App","Container","className","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oFAAAA,EAAOC,QAAU,CACbC,QAAU,mCACVC,KAAM,oC,4KC2BKC,EA1BM,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAAc,EACVC,mBAAS,IADC,mBAC1BC,EAD0B,KACrBC,EADqB,KAEjC,OACI,qCACA,cAACC,EAAA,EAAD,UACG,cAACC,EAAA,EAAD,UACK,sDAGR,cAACD,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SACE,cAACC,EAAA,EAAD,CACEC,YAAY,iBACZC,SAAU,SAACC,GAAD,OAAUP,EAAQO,EAAMC,OAAOC,QACzCA,MAAOV,QAIf,cAACE,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,UACI,cAACQ,EAAA,EAAD,CAAQC,QAAS,kBAAMd,EAASE,IAAhC,mC,gBCWDa,EAhCE,SAACC,GAAe,IAAD,EACJf,mBAAS,MADL,mBACrBgB,EADqB,KACfC,EADe,OAEFjB,mBAAS,MAFP,mBAErBkB,EAFqB,KAEdC,EAFc,OAGMnB,mBAAS,MAHf,mBAGrBoB,EAHqB,KAGVC,EAHU,OAINrB,mBAASe,GAJH,mBAIrBO,EAJqB,KAIhBC,EAJgB,KA6B5B,OArBJC,qBAAU,WACFF,IACJD,GAAa,GACbJ,EAAQ,MACRE,EAAS,MAETM,MAAMH,GACLI,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACV,GACHK,GAAa,GACNL,EAAKa,KAAO,IACXV,EAASH,EAAKc,SAGtBb,EAAQD,MAEXe,OAAM,SAACb,GACJG,GAAa,GACbF,EAASD,SAEf,CAACI,IACO,CAAEN,OAAME,QAAOE,YAAWG,W,gBCXrBS,EAlBM,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,GAAGC,EAAiC,EAAjCA,SAASC,EAAwB,EAAxBA,SAASC,EAAe,EAAfA,KAAKC,EAAU,EAAVA,KACvCC,EAAO,IAAIC,KAAKN,GACtB,OACG,eAACO,EAAA,EAAD,WACG,cAACA,EAAA,EAAKC,IAAN,CAAUC,QAAQ,MAAMC,IAAG,2CAAsCN,EAAtC,aAC3B,eAACG,EAAA,EAAKI,KAAN,WACG,cAACJ,EAAA,EAAKK,MAAN,UAAaT,IACb,8BACKE,EAAKQ,qBADV,MACmCR,EAAKS,wBAExC,sCAASb,KACT,sCAASC,YCSPa,EAlBK,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAClB,OACI,cAAC9C,EAAA,EAAD,UACK8C,EAASC,KAAI,gBAAEjB,EAAF,EAAEA,GAAIG,EAAN,EAAMA,KAAMe,EAAZ,EAAYA,QAAZ,OACV,cAAC/C,EAAA,EAAD,UACI,cAAC,EAAD,CACE+B,SAAUC,EAAKD,SACfD,SAAUE,EAAKF,SACfD,GAAO,IAAHA,EACJG,KAAMe,EAAQ,GAAGf,KACjBC,KAAMc,EAAQ,GAAGd,QANbJ,SCeXmB,EAhBH,WAAO,IAAD,EACwBtC,IAAjCE,EADS,EACTA,KAAKE,EADI,EACJA,MAAOE,EADH,EACGA,UAAWG,EADd,EACcA,OAO9B,OACE,eAAC8B,EAAA,EAAD,CAAWC,UAAU,MAArB,UACG,cAAC,EAAD,CAAcvD,SAAU,SAACE,GAAD,OAAUsB,EAAO,GAAD,OAAI1B,OAAJ,gCAAgCI,EAAhC,wBAAoDL,UAApD,qBAPvCsB,EAAc,uDAA0BA,MACxCF,GAAQI,EAAkB,2CAC1BJ,EACG,cAAC,EAAD,CAAaiC,SAAUjC,EAAKuC,OADlB,SCANC,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBhC,MAAK,YAAkD,IAA/CiC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,QCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.27455e0c.chunk.js","sourcesContent":["module.exports = { \r\n    API_Key : \"9b7f552245c27b4239131b02133b0eb3\", \r\n    Base :'https://api.openweathermap.org/',\r\n}; \r\n","import React, {useState} from 'react';  \r\nimport {Row, Col, FormControl, Button} from 'react-bootstrap';  \r\n\r\nconst CitySelector = ({onSearch}) => { \r\n    const [city,setCity] = useState('');  \r\n    return (\r\n        <> \r\n        <Row> \r\n           <Col> \r\n                <h1>Search your city</h1>\r\n           </Col> \r\n        </Row>  \r\n        <Row>   \r\n            <Col xs={4}> \r\n              <FormControl \r\n                placeholder=\"Enter the city\" \r\n                onChange={(event)=> setCity(event.target.value)} \r\n                value={city}  \r\n            />\r\n            </Col>\r\n        </Row> \r\n        <Row>\r\n            <Col>  \r\n                <Button onClick={() => onSearch(city)}>Check Weather</Button>\r\n            </Col>\r\n        </Row>\r\n        </>\r\n    );\r\n};\r\nexport default CitySelector; ","import {useState, useEffect} from 'react'; \r\n\r\nconst UseFetch = (intialUrl) => { \r\n    const [data, setData] = useState(null); \r\n    const [error, setError] = useState(null); \r\n    const [isLoading, setIsLoading] = useState(null); \r\n    const [url, setUrl] = useState(intialUrl); \r\n\r\n \r\n\r\nuseEffect(() =>{   \r\n    if(!url) return;\r\n    setIsLoading(true); \r\n    setData(null); \r\n    setError(null); \r\n\r\n    fetch(url) \r\n    .then((response) => response.json()) \r\n    .then((data) =>{ \r\n        setIsLoading(false); \r\n            if(data.cod >= 400){ \r\n                setError(data.message); \r\n               return;\r\n         } \r\n        setData(data);\r\n    }) \r\n    .catch((error)=>{ \r\n        setIsLoading(false); \r\n        setError(error);\r\n    });\r\n},[url]); \r\n    return{ data, error, isLoading, setUrl};\r\n};  \r\n\r\nexport default UseFetch;","import React from 'react'\r\nimport {Card} from 'react-bootstrap';\r\nconst  WeatherCard = ({dt,temp_min,temp_max,main,icon}) => { \r\n    const date = new Date(dt);\r\n    return (\r\n       <Card> \r\n          <Card.Img variant=\"top\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\r\n          <Card.Body> \r\n             <Card.Title>{main}</Card.Title> \r\n             <p> \r\n                 {date.toLocaleDateString()} - {date.toLocaleTimeString()} \r\n             </p> \r\n             <p>Min: {temp_min}</p> \r\n             <p>Max: {temp_max}</p>\r\n          </Card.Body> \r\n       </Card>\r\n            \r\n    );\r\n};\r\n\r\nexport default WeatherCard\r\n","import React from 'react' \r\nimport { Col, Row } from 'react-bootstrap' \r\nimport WeatherCard from './WeatherCard' \r\n\r\nconst WeatherList = ({weathers}) => { \r\n    return ( \r\n        <Row>\r\n            {weathers.map(({dt, main, weather})=> ( \r\n                <Col key={dt}> \r\n                    <WeatherCard \r\n                      temp_max={main.temp_max}  \r\n                      temp_min={main.temp_min} \r\n                      dt={dt*1000} \r\n                      main={weather[0].main} \r\n                      icon={weather[0].icon}\r\n                    /> \r\n                </Col>    \r\n            ))}\r\n        </Row> \r\n    )\r\n} \r\n\r\nexport default WeatherList;\r\n","import React from 'react' \nimport CitySelector from './CitySelector';\nimport './App.css'; \nimport {Container} from 'react-bootstrap'; \nimport UseFetch from './UseFetch'; \nimport {API_Key, Base} from './keys'; \nimport WeatherList from './WeatherList'; \nconst App = () => { \n  const {data,error, isLoading, setUrl} = UseFetch(); \n  const getcontent = () =>{ \n    if (error) return <h2>Error when fetching: {error}</h2> \n    if(!data && isLoading) return <h2>LOADING..</h2> \n    if(!data) return null; \n    return <WeatherList weathers={data.list} />\n  };\n  return (\n    <Container className=\"App\"> \n       <CitySelector onSearch={(city) => setUrl(`${Base}/data/2.5/forecast?q=${city}&cnt=5&appid=${API_Key}&units=metric`)}/>  \n          {getcontent()}\n    </Container>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App'; \nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}